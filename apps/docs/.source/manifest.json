{"files":[{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/solid/index.mdx","data":{"lastModified":1727703470000,"frontmatter":{"title":"Introduction","description":"A powerful library for creating flexible Stepper components in Solid","icon":"Album"},"structuredData":{"contents":[{"heading":"","content":"Both the documents and the Solid package are not yet ready."}],"headings":[]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/index.mdx","data":{"lastModified":1727703470000,"frontmatter":{"title":"Introduction","description":"A powerful library for creating flexible Stepper components in React","icon":"Album"},"structuredData":{"contents":[{"heading":"stepperize-simplifying-multi-step-processes-in-react","content":"Stepperize is a versatile React library designed to streamline the creation of Stepper components. It empowers developers to build complex, multi-step processes with ease, allowing them to focus on business logic rather than implementation details."},{"heading":"key-features","content":"Flexible Step Management: Create linear or branching flows"},{"heading":"key-features","content":"Headless Component: Full control over styling and UI"},{"heading":"key-features","content":"React Native Compatible: Build steppers for web and mobile apps"},{"heading":"key-features","content":"Conditional Rendering: Dynamically adjust content based on user input"},{"heading":"key-features","content":"State Management: Built-in tools for handling step state"},{"heading":"1-thinking-in-steps","content":"Steppers break down complex workflows into manageable chunks, providing:"},{"heading":"1-thinking-in-steps","content":"Clear navigation between steps"},{"heading":"1-thinking-in-steps","content":"Visual progress indicators"},{"heading":"1-thinking-in-steps","content":"Improved user experience for multi-stage processes"},{"heading":"common-use-cases","content":"User onboarding"},{"heading":"common-use-cases","content":"Multi-page forms"},{"heading":"common-use-cases","content":"E-commerce checkout"},{"heading":"common-use-cases","content":"Product creation wizards"},{"heading":"common-use-cases","content":"Tutorial walkthroughs"},{"heading":"common-use-cases","content":"Surveys and questionnaires"},{"heading":"common-use-cases","content":"Booking systems"},{"heading":"2-thinking-in-flows","content":"Stepperize goes beyond linear progressions, enabling:"},{"heading":"2-thinking-in-flows","content":"Conditional rendering"},{"heading":"2-thinking-in-flows","content":"Branching paths"},{"heading":"2-thinking-in-flows","content":"Dynamic form adjustments"},{"heading":"2-thinking-in-flows","content":"Personalized user experiences"},{"heading":"2-thinking-in-flows","content":"State-dependent UI changes"},{"heading":"2-thinking-in-flows","content":"Multi-path processes"}],"headings":[{"id":"stepperize-simplifying-multi-step-processes-in-react","content":"Stepperize: Simplifying Multi-Step Processes in React"},{"id":"key-features","content":"Key Features"},{"id":"core-concepts","content":"Core Concepts"},{"id":"1-thinking-in-steps","content":"1. Thinking in Steps"},{"id":"common-use-cases","content":"Common Use Cases"},{"id":"2-thinking-in-flows","content":"2. Thinking in Flows"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/installation.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Installation","description":"How to install and set up @stepperize/react in your project","icon":"Rocket"},"structuredData":{"contents":[{"heading":"","content":"Choose your preferred package manager to install @stepperize/react:"},{"heading":"next-steps","content":"API References"},{"heading":"next-steps","content":"Examples"}],"headings":[{"id":"next-steps","content":"Next Steps"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/svelte/index.mdx","data":{"lastModified":1727703470000,"frontmatter":{"title":"Introduction","description":"A powerful library for creating flexible Stepper components in Svelte","icon":"Album"},"structuredData":{"contents":[{"heading":"","content":"Both the documents and the Svelte package are not yet ready."}],"headings":[]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/index.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Introduction","description":"A powerful library for creating flexible Stepper components in Vue","icon":"Album"},"structuredData":{"contents":[{"heading":"stepperize-simplifying-multi-step-processes-in-vue","content":"Stepperize is a versatile Vue library designed to streamline the creation of Stepper components. It empowers developers to build complex, multi-step processes with ease, allowing them to focus on business logic rather than implementation details."},{"heading":"key-features","content":"Flexible Step Management: Create linear or branching flows"},{"heading":"key-features","content":"Headless Component: Full control over styling and UI"},{"heading":"key-features","content":"React Native Compatible: Build steppers for web and mobile apps"},{"heading":"key-features","content":"Conditional Rendering: Dynamically adjust content based on user input"},{"heading":"key-features","content":"State Management: Built-in tools for handling step state"},{"heading":"1-thinking-in-steps","content":"Steppers break down complex workflows into manageable chunks, providing:"},{"heading":"1-thinking-in-steps","content":"Clear navigation between steps"},{"heading":"1-thinking-in-steps","content":"Visual progress indicators"},{"heading":"1-thinking-in-steps","content":"Improved user experience for multi-stage processes"},{"heading":"common-use-cases","content":"User onboarding"},{"heading":"common-use-cases","content":"Multi-page forms"},{"heading":"common-use-cases","content":"E-commerce checkout"},{"heading":"common-use-cases","content":"Product creation wizards"},{"heading":"common-use-cases","content":"Tutorial walkthroughs"},{"heading":"common-use-cases","content":"Surveys and questionnaires"},{"heading":"common-use-cases","content":"Booking systems"},{"heading":"2-thinking-in-flows","content":"Stepperize goes beyond linear progressions, enabling:"},{"heading":"2-thinking-in-flows","content":"Conditional rendering"},{"heading":"2-thinking-in-flows","content":"Branching paths"},{"heading":"2-thinking-in-flows","content":"Dynamic form adjustments"},{"heading":"2-thinking-in-flows","content":"Personalized user experiences"},{"heading":"2-thinking-in-flows","content":"State-dependent UI changes"},{"heading":"2-thinking-in-flows","content":"Multi-path processes"}],"headings":[{"id":"stepperize-simplifying-multi-step-processes-in-vue","content":"Stepperize: Simplifying Multi-Step Processes in Vue"},{"id":"key-features","content":"Key Features"},{"id":"core-concepts","content":"Core Concepts"},{"id":"1-thinking-in-steps","content":"1. Thinking in Steps"},{"id":"common-use-cases","content":"Common Use Cases"},{"id":"2-thinking-in-flows","content":"2. Thinking in Flows"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/installation.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Installation","description":"How to install and set up @stepperize/vue in your project","icon":"Rocket"},"structuredData":{"contents":[{"heading":"","content":"Choose your preferred package manager to install @stepperize/vue:"},{"heading":"next-steps","content":"API References"},{"heading":"next-steps","content":"Examples (coming soon)"}],"headings":[{"id":"next-steps","content":"Next Steps"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/api-references/define.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Define","description":"How to define a stepper using defineStepper"},"structuredData":{"contents":[{"heading":"","content":"defineStepper is the core function for creating a customizable stepper. It generates the necessary components and hooks for building your stepper UI and managing its state."},{"heading":"define-steps","content":"Call defineStepper with your step configurations:"},{"heading":"define-steps","content":"id (required): Unique identifier for each step"},{"heading":"define-steps","content":"Add any custom properties (e.g., title, description) for use in your UI"},{"heading":"return-value","content":"defineStepper returns an object with:"},{"heading":"return-value","content":"Scoped: A Provider component for scoping stepper state"},{"heading":"return-value","content":"useStepper: A custom hook for accessing and controlling the stepper"},{"heading":"return-value","content":"steps: An array of the defined step objects"},{"heading":"next-steps","content":"Learn how to use the returned components and hooks:"},{"heading":"next-steps","content":"useStepper Hook"},{"heading":"next-steps","content":"Scoped Component"}],"headings":[{"id":"usage","content":"Usage"},{"id":"import","content":"Import"},{"id":"define-steps","content":"Define steps"},{"id":"return-value","content":"Return Value"},{"id":"next-steps","content":"Next Steps"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/api-references/hook.mdx","data":{"lastModified":1736128472000,"frontmatter":{"title":"Hook","description":"Access and control your stepper with the useStepper hook"},"structuredData":{"contents":[{"heading":"","content":"The useStepper hook provides methods to interact with and render your stepper. It can be used with or without the Scoped component."},{"heading":"when","content":"The when method allows rendering content conditionally based on the current step.\nIt can take an id of a step (either a string or an array of a step ID followed by booleans)\nand a whenFn (the function to execute if the step matches). Additionally, you can provide\nan optional elseFn (the function to execute if the step does not match)."},{"heading":"when","content":"You can define more complex conditions that not only depend on the current step's ID\nbut also on additional boolean values. This allows for multi-condition logic where each\nboolean must evaluate to true for the step to match. The boolean values can represent\ndifferent state conditions or external factors that affect the step's visibility or behavior."},{"heading":"when","content":"The first element of the array is the step ID, the following elements are the boolean values."},{"heading":"switch","content":"The switch method allows you to render content based on the current step's ID,\nsimilar to a switch-case structure. This method provides a cleaner and more scalable\nway to handle different step-specific rendering logic, making it ideal for scenarios\nwhere you need to differentiate the UI depending on the current step without writing\nmultiple when conditions."},{"heading":"match","content":"The match method allows you to render content based on an external state,\nsuch as a value fetched from a server or any dynamic state in your application.\nThis provides flexibility for rendering content that is tied not only to the\ncurrent step in the stepper but also to any other state outside the stepper's\ncontext, such as user actions, data from an API, or global application state."},{"heading":"match","content":"match allows state-based control from client or server, useful for frameworks like Remix with server-side state management."},{"heading":"api-reference","content":"Name"},{"heading":"api-reference","content":"Type"},{"heading":"api-reference","content":"Description"},{"heading":"api-reference","content":"all"},{"heading":"api-reference","content":"Step[]"},{"heading":"api-reference","content":"Returns all steps"},{"heading":"api-reference","content":"current"},{"heading":"api-reference","content":"Step"},{"heading":"api-reference","content":"Returns the current step"},{"heading":"api-reference","content":"isLast"},{"heading":"api-reference","content":"boolean"},{"heading":"api-reference","content":"Returns true if the current step is the last step"},{"heading":"api-reference","content":"isFirst"},{"heading":"api-reference","content":"boolean"},{"heading":"api-reference","content":"Returns true if the current step is the first step"},{"heading":"api-reference","content":"next"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Advances to the next step"},{"heading":"api-reference","content":"prev"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Returns to the previous step"},{"heading":"api-reference","content":"get"},{"heading":"api-reference","content":"(id: string) => Step"},{"heading":"api-reference","content":"Returns a step by its ID"},{"heading":"api-reference","content":"goTo"},{"heading":"api-reference","content":"(id: string) => void"},{"heading":"api-reference","content":"Navigates to a specific step by its ID"},{"heading":"api-reference","content":"reset"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Resets the stepper to its initial state"},{"heading":"api-reference","content":"when"},{"heading":"api-reference","content":"(id: string, whenFn: (step: Step) => React.ReactNode, elseFn?: (step: Step) => React.ReactNode) => React.ReactNode"},{"heading":"api-reference","content":"Executes a function based on the current step ID"},{"heading":"api-reference","content":"switch"},{"heading":"api-reference","content":"(steps: { [id: string]: (step: Step) => React.ReactNode }) => React.ReactNode"},{"heading":"api-reference","content":"Executes a function based on a switch-case-like structure for steps"},{"heading":"api-reference","content":"match"},{"heading":"api-reference","content":"(state: string, steps: { [id: string]: (step: Step) => React.ReactNode }) => React.ReactNode"},{"heading":"api-reference","content":"Matches the current state with a set of possible states and executes the corresponding function"}],"headings":[{"id":"usage","content":"Usage"},{"id":"rendering-methods","content":"Rendering Methods"},{"id":"when","content":"when"},{"id":"switch","content":"switch"},{"id":"match","content":"match"},{"id":"api-reference","content":"API Reference"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/api-references/scoped.mdx","data":{"lastModified":1736125807000,"frontmatter":{"title":"Scoped","description":"Using the Scoped component to share stepper state across child components"},"structuredData":{"contents":[{"heading":"","content":"The Scoped component acts as a provider, allowing you to synchronize stepper state via useStepper across child components."},{"heading":"basic-usage","content":"Use Scoped only when child components need access to stepper state. Otherwise, use the hook directly in your component."},{"heading":"api-reference","content":"Name"},{"heading":"api-reference","content":"Type"},{"heading":"api-reference","content":"Description"},{"heading":"api-reference","content":"Required"},{"heading":"api-reference","content":"initialStep"},{"heading":"api-reference","content":"string"},{"heading":"api-reference","content":"ID of the initial step to display."},{"heading":"api-reference","content":"No"},{"heading":"api-reference","content":"children"},{"heading":"api-reference","content":"React.ReactNode"},{"heading":"api-reference","content":"Content to render inside the stepper."},{"heading":"api-reference","content":"Yes"},{"heading":"nested-scopes","content":"You can nest multiple scopes for more complex stepper hierarchies:"},{"heading":"nested-scopes","content":"This structure allows for independent control of global and local stepper states."}],"headings":[{"id":"basic-usage","content":"Basic Usage"},{"id":"api-reference","content":"API Reference"},{"id":"nested-scopes","content":"Nested Scopes"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/api-references/utils.mdx","data":{"lastModified":1736125807000,"frontmatter":{"title":"Utils","description":"Pure utility functions for working with steps"},"structuredData":{"contents":[{"heading":"","content":"The Utils object provides a set of pure functions for working with steps. These functions help you query and traverse step collections without modifying state or requiring stepper context."},{"heading":"functions","content":"Function"},{"heading":"functions","content":"Description"},{"heading":"functions","content":"Parameters"},{"heading":"functions","content":"Returns"},{"heading":"functions","content":"getAll"},{"heading":"functions","content":"Retrieves all steps in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"An array of all steps"},{"heading":"functions","content":"get"},{"heading":"functions","content":"Retrieves a step by its ID."},{"heading":"functions","content":"id: The ID of the step to retrieve"},{"heading":"functions","content":"The step with the specified ID"},{"heading":"functions","content":"getIndex"},{"heading":"functions","content":"Retrieves the index of a step by its ID."},{"heading":"functions","content":"id: The ID of the step to retrieve the index for"},{"heading":"functions","content":"The index of the step"},{"heading":"functions","content":"getByIndex"},{"heading":"functions","content":"Retrieves a step by its index."},{"heading":"functions","content":"index: The index of the step to retrieve"},{"heading":"functions","content":"The step at the specified index"},{"heading":"functions","content":"getFirst"},{"heading":"functions","content":"Retrieves the first step in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"The first step"},{"heading":"functions","content":"getLast"},{"heading":"functions","content":"Retrieves the last step in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"The last step"},{"heading":"functions","content":"getNext"},{"heading":"functions","content":"Retrieves the next step after the specified ID."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"The next step"},{"heading":"functions","content":"getPrev"},{"heading":"functions","content":"Retrieves the previous step before the specified ID."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"The previous step"},{"heading":"functions","content":"getNeighbors"},{"heading":"functions","content":"Retrieves the neighboring steps (previous and next) of the specified step."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"An object containing the previous and next steps, or null if they do not exist"},{"heading":"usage-example","content":"Here's a quick example of how you might use the Utils object in a React component:"}],"headings":[{"id":"functions","content":"Functions"},{"id":"usage-example","content":"Usage Example"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/basic.mdx","data":{"lastModified":1728267083000,"frontmatter":{"title":"Basic Examples","description":"Explore various usage patterns of Stepperize in React applications."},"structuredData":{"contents":[{"heading":"horizontal-stepper","content":"The horizontal stepper is the most common and straightforward implementation of Stepperize. It provides a linear progression through a series of steps, ideal for workflows or multi-step forms."},{"heading":"horizontal-stepper","content":"Key features:Horizontal layoutSimple navigation using the switch method"},{"heading":"vertical-stepper","content":"For interfaces with limited horizontal space or when you need to display more detailed information for each step, the vertical stepper is an excellent choice."},{"heading":"vertical-stepper","content":"Key features:Vertical layoutSuitable for mobile interfaces or sidebars"},{"heading":"custom-circular-stepper","content":"Stepperize allows for extensive customization. This example showcases a circular stepper design, demonstrating how you can tailor the appearance to match your application's aesthetic."},{"heading":"custom-circular-stepper","content":"Key features:Custom circular step indicatorsFlexible layout options"},{"heading":"usage-tips","content":"Use the switch method to programmatically change steps"},{"heading":"usage-tips","content":"Customize the appearance using CSS, Tailwind CSS, or any other styling library"},{"heading":"usage-tips","content":"Combine with form libraries for complex multi-step forms"},{"heading":"usage-tips","content":"Implement validation logic between steps for guided user experiences"}],"headings":[{"id":"horizontal-stepper","content":"Horizontal Stepper"},{"id":"live-demo","content":"Live Demo"},{"id":"vertical-stepper","content":"Vertical Stepper"},{"id":"live-demo-1","content":"Live Demo"},{"id":"custom-circular-stepper","content":"Custom Circular Stepper"},{"id":"live-demo-2","content":"Live Demo"},{"id":"usage-tips","content":"Usage Tips"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/conform-react.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Conform React","description":"Stepperize with Conform library."},"structuredData":{"contents":[{"heading":"","content":"This example demonstrates how to use the @stepperize/react with @conform-to/react to create a stepperized form."},{"heading":"additional-resources","content":"Conform Documentation"}],"headings":[{"id":"live-demo","content":"Live Demo"},{"id":"additional-resources","content":"Additional Resources"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/dialog.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Dialog","description":"Coming soon..."},"structuredData":{"contents":[],"headings":[]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/multi-scoped.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Multi-scoped Stepper","description":"Implement a Stepper component with multiple scoped containers for advanced UI workflows."},"structuredData":{"contents":[{"heading":"","content":"The Multi-scoped Stepper allows you to create complex, multi-level workflows within your React application. This component is particularly useful for:"},{"heading":"","content":"Multi-step forms with nested sections"},{"heading":"","content":"Wizard-like interfaces with branching paths"},{"heading":"","content":"Hierarchical navigation structures"},{"heading":"","content":"Key FeaturesNested step structureIndependent progress tracking for each scopeCustomizable step content and navigation"},{"heading":"live-demo","content":"Interact with the Multi-scoped Stepper example below:"}],"headings":[{"id":"live-demo","content":"Live Demo"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/query-params.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Query Params","description":"Coming soon..."},"structuredData":{"contents":[],"headings":[]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/react-hook-form.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"React Hook Form","description":"Stepperize with React Hook Form library."},"structuredData":{"contents":[{"heading":"","content":"This example demonstrates how to use @stepperize/react with react-hook-form to create a stepperized form."},{"heading":"additional-resources","content":"React Hook Form Documentation"}],"headings":[{"id":"live-demo","content":"Live Demo"},{"id":"additional-resources","content":"Additional Resources"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/scoped.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Scoped Stepper","description":"Use the Stepper component with scoped children for a more customized experience."},"structuredData":{"contents":[{"heading":"","content":"The Scoped Stepper allows you to create a multi-step process with custom content for each step. This example demonstrates how to use the Stepper component with scoped children, giving you more control over the content and layout of each step."},{"heading":"","content":"Key FeaturesCustom content for each stepFlexible layout optionsEasy integration with your React components"}],"headings":[{"id":"live-demo","content":"Live Demo"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/examples/shareable-data.mdx","data":{"lastModified":1727676518000,"frontmatter":{"title":"Shareable Data","description":"Coming soon..."},"structuredData":{"contents":[],"headings":[]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/api-references/composable.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Composable","description":"Access and control your stepper with the useStepper composable"},"structuredData":{"contents":[{"heading":"","content":"The useStepper composable provides methods to interact with and render your stepper. It can be used with or without the Scoped component."},{"heading":"when","content":"The when method allows rendering content conditionally based on the current step.\nIt can take an id of a step (either a string or an array of a step ID followed by booleans)\nand a whenFn (the function to execute if the step matches). Additionally, you can provide\nan optional elseFn (the function to execute if the step does not match)."},{"heading":"when","content":"You can define more complex conditions that not only depend on the current step's ID\nbut also on additional boolean values. This allows for multi-condition logic where each\nboolean must evaluate to true for the step to match. The boolean values can represent\ndifferent state conditions or external factors that affect the step's visibility or behavior."},{"heading":"when","content":"The first element of the array is the step ID, the following elements are the boolean values."},{"heading":"switch","content":"The switch method allows you to render content based on the current step's ID,\nsimilar to a switch-case structure. This method provides a cleaner and more scalable\nway to handle different step-specific rendering logic, making it ideal for scenarios\nwhere you need to differentiate the UI depending on the current step without writing\nmultiple when conditions."},{"heading":"match","content":"The match method allows you to render content based on an external state,\nsuch as a value fetched from a server or any dynamic state in your application.\nThis provides flexibility for rendering content that is tied not only to the\ncurrent step in the stepper but also to any other state outside the stepper's\ncontext, such as user actions, data from an API, or global application state."},{"heading":"match","content":"match allows state-based control from client or server, useful for frameworks like Nuxt with server-side state management."},{"heading":"api-reference","content":"Name"},{"heading":"api-reference","content":"Type"},{"heading":"api-reference","content":"Description"},{"heading":"api-reference","content":"all"},{"heading":"api-reference","content":"Step[]"},{"heading":"api-reference","content":"Returns all steps"},{"heading":"api-reference","content":"current"},{"heading":"api-reference","content":"Step"},{"heading":"api-reference","content":"Returns the current step"},{"heading":"api-reference","content":"isLast"},{"heading":"api-reference","content":"boolean"},{"heading":"api-reference","content":"Returns true if the current step is the last step"},{"heading":"api-reference","content":"isFirst"},{"heading":"api-reference","content":"boolean"},{"heading":"api-reference","content":"Returns true if the current step is the first step"},{"heading":"api-reference","content":"next"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Advances to the next step"},{"heading":"api-reference","content":"prev"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Returns to the previous step"},{"heading":"api-reference","content":"get"},{"heading":"api-reference","content":"(id: string) => Step"},{"heading":"api-reference","content":"Returns a step by its ID"},{"heading":"api-reference","content":"goTo"},{"heading":"api-reference","content":"(id: string) => void"},{"heading":"api-reference","content":"Navigates to a specific step by its ID"},{"heading":"api-reference","content":"reset"},{"heading":"api-reference","content":"() => void"},{"heading":"api-reference","content":"Resets the stepper to its initial state"},{"heading":"api-reference","content":"when"},{"heading":"api-reference","content":"(id: string, whenFn: (step: Step) => VNodeChild, elseFn?: (step: Step) => VNodeChild) => VNodeChild"},{"heading":"api-reference","content":"Executes a function based on the current step ID"},{"heading":"api-reference","content":"switch"},{"heading":"api-reference","content":"(steps: { [id: string]: (step: Step) => VNodeChild }) => VNodeChild"},{"heading":"api-reference","content":"Executes a function based on a switch-case-like structure for steps"},{"heading":"api-reference","content":"match"},{"heading":"api-reference","content":"(state: string, steps: { [id: string]: (step: Step) => VNodeChild }) => VNodeChild"},{"heading":"api-reference","content":"Matches the current state with a set of possible states and executes the corresponding function"}],"headings":[{"id":"usage","content":"Usage"},{"id":"rendering-methods","content":"Rendering Methods"},{"id":"when","content":"when"},{"id":"switch","content":"switch"},{"id":"match","content":"match"},{"id":"api-reference","content":"API Reference"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/api-references/define.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Define","description":"How to define a stepper using defineStepper"},"structuredData":{"contents":[{"heading":"","content":"defineStepper is the core function for creating a customizable stepper. It generates the necessary components and composables for building your stepper UI and managing its state."},{"heading":"define-steps","content":"Call defineStepper with your step configurations:"},{"heading":"define-steps","content":"id (required): Unique identifier for each step"},{"heading":"define-steps","content":"Add any custom properties (e.g., title, description) for use in your UI"},{"heading":"return-value","content":"defineStepper returns an object with:"},{"heading":"return-value","content":"Scoped: A Provider component for scoping stepper state"},{"heading":"return-value","content":"useStepper: A custom composable for accessing and controlling the stepper"},{"heading":"return-value","content":"steps: An array of the defined step objects"},{"heading":"next-steps","content":"Learn how to use the returned components and composables:"},{"heading":"next-steps","content":"useStepper Composable"},{"heading":"next-steps","content":"Scoped Component"}],"headings":[{"id":"usage","content":"Usage"},{"id":"import","content":"Import"},{"id":"define-steps","content":"Define steps"},{"id":"return-value","content":"Return Value"},{"id":"next-steps","content":"Next Steps"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/api-references/scoped.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Scoped","description":"Using the Scoped component to share stepper state across child components"},"structuredData":{"contents":[{"heading":"","content":"The Scoped component acts as a provider, allowing you to synchronize stepper state via useStepper across child components."},{"heading":"basic-usage","content":"Use Scoped only when child components need access to stepper state. Otherwise, use the composable directly in your component."},{"heading":"api-reference","content":"Name"},{"heading":"api-reference","content":"Type"},{"heading":"api-reference","content":"Description"},{"heading":"api-reference","content":"Required"},{"heading":"api-reference","content":"initialStep"},{"heading":"api-reference","content":"string"},{"heading":"api-reference","content":"ID of the initial step to display."},{"heading":"api-reference","content":"No"},{"heading":"nested-scopes","content":"You can nest multiple scopes for more complex stepper hierarchies:"},{"heading":"nested-scopes","content":"This structure allows for independent control of global and local stepper states."}],"headings":[{"id":"basic-usage","content":"Basic Usage"},{"id":"api-reference","content":"API Reference"},{"id":"nested-scopes","content":"Nested Scopes"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/vue/api-references/utils.mdx","data":{"lastModified":1736327335000,"frontmatter":{"title":"Utils","description":"Pure utility functions for working with steps"},"structuredData":{"contents":[{"heading":"","content":"The Utils object provides a set of pure functions for working with steps. These functions help you query and traverse step collections without modifying state or requiring stepper context."},{"heading":"functions","content":"Function"},{"heading":"functions","content":"Description"},{"heading":"functions","content":"Parameters"},{"heading":"functions","content":"Returns"},{"heading":"functions","content":"getAll"},{"heading":"functions","content":"Retrieves all steps in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"An array of all steps"},{"heading":"functions","content":"get"},{"heading":"functions","content":"Retrieves a step by its ID."},{"heading":"functions","content":"id: The ID of the step to retrieve"},{"heading":"functions","content":"The step with the specified ID"},{"heading":"functions","content":"getIndex"},{"heading":"functions","content":"Retrieves the index of a step by its ID."},{"heading":"functions","content":"id: The ID of the step to retrieve the index for"},{"heading":"functions","content":"The index of the step"},{"heading":"functions","content":"getByIndex"},{"heading":"functions","content":"Retrieves a step by its index."},{"heading":"functions","content":"index: The index of the step to retrieve"},{"heading":"functions","content":"The step at the specified index"},{"heading":"functions","content":"getFirst"},{"heading":"functions","content":"Retrieves the first step in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"The first step"},{"heading":"functions","content":"getLast"},{"heading":"functions","content":"Retrieves the last step in the stepper."},{"heading":"functions","content":"None"},{"heading":"functions","content":"The last step"},{"heading":"functions","content":"getNext"},{"heading":"functions","content":"Retrieves the next step after the specified ID."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"The next step"},{"heading":"functions","content":"getPrev"},{"heading":"functions","content":"Retrieves the previous step before the specified ID."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"The previous step"},{"heading":"functions","content":"getNeighbors"},{"heading":"functions","content":"Retrieves the neighboring steps (previous and next) of the specified step."},{"heading":"functions","content":"id: The ID of the current step"},{"heading":"functions","content":"An object containing the previous and next steps, or null if they do not exist"},{"heading":"usage-example","content":"Here's a quick example of how you might use the Utils object in a Vue component:"}],"headings":[{"id":"functions","content":"Functions"},{"id":"usage-example","content":"Usage Example"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/migration/migrating-to-v2.mdx","data":{"lastModified":1726164504000,"frontmatter":{"title":"Migrating to v2","description":"Learn how to migrate from v1 to v2","icon":"CircleFadingArrowUp"},"structuredData":{"contents":[{"heading":"","content":"Stepperize v2 is a complete rewrite of the original Stepperize library. It comes with a few breaking changes and new features."},{"heading":"definesteps-helper","content":"The defineSteps function has been removed. Use defineStepper instead."},{"heading":"definesteps-helper","content":"Also, defineStepper only requires one id for each step and the type Step no longer\nhas any other value, since you can send it anything else in favour of automatic inference."},{"heading":"definesteps-helper","content":"For more information, see the Define section."},{"heading":"stepper-provider","content":"The Stepper component has been removed. Use Scoped from defineStepper object instead if you want to use with 1 or more Scopes of steps."},{"heading":"stepper-provider","content":"We don't need to pass the array of steps to the component anymore."},{"heading":"stepper-provider","content":"The Stepper component only accepts one prop, initialStep, which is the initial step to be active initially."},{"heading":"stepper-provider","content":"For more information, see the Scoped section."},{"heading":"usestepper-hook","content":"The useStepper hook has been removed. Use useStepper from defineStepper instead."},{"heading":"usestepper-hook","content":"For more information, see the Hook section."}],"headings":[{"id":"breaking-changes","content":"Breaking Changes"},{"id":"definesteps-helper","content":"defineSteps helper"},{"id":"stepper-provider","content":"Stepper Provider"},{"id":"usestepper-hook","content":"useStepper hook"}]}},"collection":"docs"},{"path":"/Users/damianricobelli/Desktop/Personal/stepperize/apps/docs/content/docs/react/migration/migrating-to-v3.mdx","data":{"lastModified":1726164504000,"frontmatter":{"title":"Migrating to v3","description":"Learn how to migrate from v2 to v3","icon":"CircleFadingArrowUp"},"structuredData":{"contents":[{"heading":"","content":"Stepperize v3 brings with it a number of naming changes to make the pattern.\nIt also adds a switch method that allows to render in a simpler way the components we want for each step."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"The values returned by the useStepper hook have been renamed to make the pattern more consistent."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"currentStep is now current."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"isFirstStep is now isFirst."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"isLastStep is now isLast."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"getStepById is now get."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"goToNextStep is now next."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"goToPrevStep is now prev."},{"heading":"name-changes-in-the-values-returned-by-the-hook","content":"goToStep is now goTo."},{"heading":"new-switch-method","content":"The switch method has been added to the useStepper hook. This method allows us to render the components we want for each step in a simpler way."},{"heading":"add-all-property","content":"The all property has been added to the object returned by the useStepper hook. This property contains all the steps in the stepper."}],"headings":[{"id":"breaking-changes","content":"Breaking Changes"},{"id":"name-changes-in-the-values-returned-by-the-hook","content":"Name changes in the values returned by the hook"},{"id":"new-features","content":"New Features"},{"id":"new-switch-method","content":"New switch method"},{"id":"add-all-property","content":"Add all property"}]}},"collection":"docs"}]}