{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper-with-label-orientation",
  "type": "registry:component",
  "title": "Stepper with label orientation",
  "description": "A stepper with a label orientation",
  "dependencies": [
    "@stepperize/react"
  ],
  "registryDependencies": [
    "button",
    "label",
    "radio-group"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/stepper-with-label-orientation/stepper-with-label-orientation.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { defineStepper } from \"@/registry/new-york/ui/stepper\";\n\ntype LabelOrientation = \"horizontal\" | \"vertical\";\n\nconst { Stepper } = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n  }\n);\n\nexport default function StepperWithLabelOrientation() {\n  const [labelOrientation, setLabelOrientation] =\n    React.useState<LabelOrientation>(\"horizontal\");\n  return (\n    <div className=\"flex w-full flex-col gap-8\">\n      <RadioGroup\n        value={labelOrientation}\n        onValueChange={(value) =>\n          setLabelOrientation(value as LabelOrientation)\n        }\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal-label\" />\n          <Label htmlFor=\"horizontal-label\">Horizontal</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"vertical\" id=\"vertical-label\" />\n          <Label htmlFor=\"vertical-label\">Vertical</Label>\n        </div>\n      </RadioGroup>\n      <Stepper.Provider\n        className=\"space-y-4\"\n        variant=\"horizontal\"\n        labelOrientation={labelOrientation}\n      >\n        {({ methods }) => (\n          <React.Fragment>\n            <Stepper.Navigation>\n              {methods.all.map((step) => (\n                <Stepper.Step\n                  key={step.id}\n                  of={step.id}\n                  onClick={() => methods.goTo(step.id)}\n                >\n                  <Stepper.Title>{step.title}</Stepper.Title>\n                </Stepper.Step>\n              ))}\n            </Stepper.Navigation>\n            {methods.switch({\n              \"step-1\": (step) => <Content id={step.id} />,\n              \"step-2\": (step) => <Content id={step.id} />,\n              \"step-3\": (step) => <Content id={step.id} />,\n            })}\n            <Stepper.Controls>\n              {!methods.isLast && (\n                <Button\n                  variant=\"secondary\"\n                  onClick={methods.prev}\n                  disabled={methods.isFirst}\n                >\n                  Previous\n                </Button>\n              )}\n              <Button onClick={methods.isLast ? methods.reset : methods.next}>\n                {methods.isLast ? \"Reset\" : \"Next\"}\n              </Button>\n            </Stepper.Controls>\n          </React.Fragment>\n        )}\n      </Stepper.Provider>\n    </div>\n  );\n}\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <Stepper.Panel className=\"h-[200px] content-center rounded border bg-slate-50 p-8\">\n      <p className=\"text-xl font-normal\">Content for {id}</p>\n    </Stepper.Panel>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}