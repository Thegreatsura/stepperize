{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper-with-description",
  "type": "registry:component",
  "title": "Stepper with description",
  "description": "A stepper with a description",
  "dependencies": [
    "@stepperize/react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/stepper-with-description/page.tsx",
      "content": "import { StepperWithDescription } from \"@/registry/new-york/blocks/stepper-with-description/components/stepper-with-description\";\n\nexport default async function Page() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center\">\n      <div className=\"w-full max-w-2xl px-4\">\n        <StepperWithDescription />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/stepper-with-description/page.tsx"
    },
    {
      "path": "registry/new-york/blocks/stepper-with-description/components/stepper-with-description.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { defineStepper } from \"@/registry/new-york/blocks/stepper-with-description/components/ui/stepper\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\nconst { Stepper } = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n    description: \"This is the first step\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n    description: \"This is the second step\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n    description: \"This is the third step\",\n  }\n);\n\nexport function StepperWithDescription() {\n  return (\n    <Stepper.Provider className=\"space-y-4\" variant=\"horizontal\">\n      {({ methods }) => (\n        <React.Fragment>\n          <Stepper.Navigation>\n            {methods.all.map((step) => (\n              <Stepper.Step\n                key={step.id}\n                of={step.id}\n                onClick={() => methods.goTo(step.id)}\n              >\n                <Stepper.Title>{step.title}</Stepper.Title>\n                <Stepper.Description>{step.description}</Stepper.Description>\n              </Stepper.Step>\n            ))}\n          </Stepper.Navigation>\n          {methods.switch({\n            \"step-1\": (step) => <Content id={step.id} />,\n            \"step-2\": (step) => <Content id={step.id} />,\n            \"step-3\": (step) => <Content id={step.id} />,\n          })}\n          <Stepper.Controls>\n            {!methods.isLast && (\n              <Button\n                variant=\"secondary\"\n                onClick={methods.prev}\n                disabled={methods.isFirst}\n              >\n                Previous\n              </Button>\n            )}\n            <Button onClick={methods.isLast ? methods.reset : methods.next}>\n              {methods.isLast ? \"Reset\" : \"Next\"}\n            </Button>\n          </Stepper.Controls>\n        </React.Fragment>\n      )}\n    </Stepper.Provider>\n  );\n}\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <Stepper.Panel className=\"h-[200px] content-center rounded border bg-secondary text-secondary-foreground p-8\">\n      <p className=\"text-xl font-normal\">Content for {id}</p>\n    </Stepper.Panel>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/stepper-with-description/components/ui/stepper.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport * as Stepperize from \"@stepperize/react\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\nconst StepperContext = React.createContext<Stepper.ConfigProps | null>(null);\n\nconst useStepperProvider = (): Stepper.ConfigProps => {\n  const context = React.useContext(StepperContext);\n  if (!context) {\n    throw new Error(\"useStepper must be used within a StepperProvider.\");\n  }\n  return context;\n};\n\nconst defineStepper = <const Steps extends Stepperize.Step[]>(\n  ...steps: Steps\n): Stepper.DefineProps<Steps> => {\n  const { Scoped, useStepper, ...rest } = Stepperize.defineStepper(...steps);\n\n  const StepperContainer = ({\n    children,\n    className,\n    ...props\n  }: Omit<React.ComponentProps<\"div\">, \"children\"> & {\n    children:\n      | React.ReactNode\n      | ((props: { methods: Stepperize.Stepper<Steps> }) => React.ReactNode);\n  }) => {\n    const methods = useStepper();\n\n    return (\n      <div\n        date-component=\"stepper\"\n        className={cn(\"w-full\", className)}\n        {...props}\n      >\n        {typeof children === \"function\" ? children({ methods }) : children}\n      </div>\n    );\n  };\n\n  return {\n    ...rest,\n    useStepper,\n    Stepper: {\n      Provider: ({\n        variant = \"horizontal\",\n        labelOrientation = \"horizontal\",\n        tracking = false,\n        children,\n        className,\n        ...props\n      }) => {\n        return (\n          <StepperContext.Provider\n            value={{ variant, labelOrientation, tracking }}\n          >\n            <Scoped\n              initialStep={props.initialStep}\n              initialMetadata={props.initialMetadata}\n            >\n              <StepperContainer className={className} {...props}>\n                {children}\n              </StepperContainer>\n            </Scoped>\n          </StepperContext.Provider>\n        );\n      },\n      Navigation: ({\n        children,\n        \"aria-label\": ariaLabel = \"Stepper Navigation\",\n        ...props\n      }) => {\n        const { variant } = useStepperProvider();\n        return (\n          <nav\n            date-component=\"stepper-navigation\"\n            aria-label={ariaLabel}\n            role=\"tablist\"\n            {...props}\n          >\n            <ol\n              date-component=\"stepper-navigation-list\"\n              className={classForNavigationList({ variant: variant })}\n            >\n              {children}\n            </ol>\n          </nav>\n        );\n      },\n      Step: ({ children, className, icon, ...props }) => {\n        const { variant, labelOrientation } = useStepperProvider();\n        const { current } = useStepper();\n\n        const utils = rest.utils;\n        const steps = rest.steps;\n\n        const stepIndex = utils.getIndex(props.of);\n        const step = steps[stepIndex];\n        const currentIndex = utils.getIndex(current.id);\n\n        const isLast = utils.getLast().id === props.of;\n        const isActive = current.id === props.of;\n\n        const dataState = getStepState(currentIndex, stepIndex);\n        const childMap = useStepChildren(children);\n\n        const title = childMap.get(\"title\");\n        const description = childMap.get(\"description\");\n        const panel = childMap.get(\"panel\");\n\n        if (variant === \"circle\") {\n          return (\n            <li\n              date-component=\"stepper-step\"\n              className={cn(\n                \"flex shrink-0 items-center gap-4 rounded-md transition-colors\",\n                className\n              )}\n            >\n              <CircleStepIndicator\n                currentStep={stepIndex + 1}\n                totalSteps={steps.length}\n              />\n              <div\n                date-component=\"stepper-step-content\"\n                className=\"flex flex-col items-start gap-1\"\n              >\n                {title}\n                {description}\n              </div>\n            </li>\n          );\n        }\n\n        return (\n          <>\n            <li\n              date-component=\"stepper-step\"\n              className={cn([\n                \"group peer relative flex items-center gap-2\",\n                \"data-[variant=vertical]:flex-row\",\n                \"data-[label-orientation=vertical]:w-full\",\n                \"data-[label-orientation=vertical]:flex-col\",\n                \"data-[label-orientation=vertical]:justify-center\",\n              ])}\n              data-variant={variant}\n              data-label-orientation={labelOrientation}\n              data-state={dataState}\n              data-disabled={props.disabled}\n            >\n              <Button\n                id={`step-${step.id}`}\n                date-component=\"stepper-step-indicator\"\n                type=\"button\"\n                role=\"tab\"\n                tabIndex={dataState !== \"inactive\" ? 0 : -1}\n                className=\"rounded-full\"\n                variant={dataState !== \"inactive\" ? \"default\" : \"secondary\"}\n                size=\"icon\"\n                aria-controls={`step-panel-${props.of}`}\n                aria-current={isActive ? \"step\" : undefined}\n                aria-posinset={stepIndex + 1}\n                aria-setsize={steps.length}\n                aria-selected={isActive}\n                onKeyDown={(e) =>\n                  onStepKeyDown(\n                    e,\n                    utils.getNext(props.of),\n                    utils.getPrev(props.of)\n                  )\n                }\n                {...props}\n              >\n                {icon ?? stepIndex + 1}\n              </Button>\n              {variant === \"horizontal\" && labelOrientation === \"vertical\" && (\n                <StepperSeparator\n                  orientation=\"horizontal\"\n                  labelOrientation={labelOrientation}\n                  isLast={isLast}\n                  state={dataState}\n                  disabled={props.disabled}\n                />\n              )}\n              <div\n                date-component=\"stepper-step-content\"\n                className=\"flex flex-col items-start\"\n              >\n                {title}\n                {description}\n              </div>\n            </li>\n\n            {variant === \"horizontal\" && labelOrientation === \"horizontal\" && (\n              <StepperSeparator\n                orientation=\"horizontal\"\n                isLast={isLast}\n                state={dataState}\n                disabled={props.disabled}\n              />\n            )}\n\n            {variant === \"vertical\" && (\n              <div className=\"flex gap-4\">\n                {!isLast && (\n                  <div className=\"flex justify-center ps-[calc(var(--spacing)_*_4.5_-_1px)]\">\n                    <StepperSeparator\n                      orientation=\"vertical\"\n                      isLast={isLast}\n                      state={dataState}\n                      disabled={props.disabled}\n                    />\n                  </div>\n                )}\n                <div className=\"my-3 flex-1 ps-4\">{panel}</div>\n              </div>\n            )}\n          </>\n        );\n      },\n      Title,\n      Description,\n      Panel: ({ children, asChild, ...props }) => {\n        const Comp = asChild ? Slot : \"div\";\n        const { tracking } = useStepperProvider();\n\n        return (\n          <Comp\n            date-component=\"stepper-step-panel\"\n            ref={(node) => scrollIntoStepperPanel(node, tracking)}\n            {...props}\n          >\n            {children}\n          </Comp>\n        );\n      },\n      Controls: ({ children, className, asChild, ...props }) => {\n        const Comp = asChild ? Slot : \"div\";\n        return (\n          <Comp\n            date-component=\"stepper-controls\"\n            className={cn(\"flex justify-end gap-4\", className)}\n            {...props}\n          >\n            {children}\n          </Comp>\n        );\n      },\n    },\n  };\n};\n\nconst Title = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"h4\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"h4\";\n\n  return (\n    <Comp\n      date-component=\"stepper-step-title\"\n      className={cn(\"text-base font-medium\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n};\n\nconst Description = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: React.ComponentProps<\"p\"> & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"p\";\n\n  return (\n    <Comp\n      date-component=\"stepper-step-description\"\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  );\n};\n\nconst StepperSeparator = ({\n  orientation,\n  isLast,\n  labelOrientation,\n  state,\n  disabled,\n}: {\n  isLast: boolean;\n  state: string;\n  disabled?: boolean;\n} & VariantProps<typeof classForSeparator>) => {\n  if (isLast) {\n    return null;\n  }\n  return (\n    <div\n      date-component=\"stepper-separator\"\n      data-orientation={orientation}\n      data-state={state}\n      data-disabled={disabled}\n      role=\"separator\"\n      tabIndex={-1}\n      className={classForSeparator({ orientation, labelOrientation })}\n    />\n  );\n};\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: Stepper.CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const fillPercentage = (currentStep / totalSteps) * 100;\n  const dashOffset = circumference - (circumference * fillPercentage) / 100;\n  return (\n    <div\n      date-component=\"stepper-step-indicator\"\n      role=\"progressbar\"\n      aria-valuenow={currentStep}\n      aria-valuemin={1}\n      aria-valuemax={totalSteps}\n      tabIndex={-1}\n      className=\"relative inline-flex items-center justify-center\"\n    >\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          className=\"text-muted-foreground\"\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\"text-primary transition-all duration-300 ease-in-out\"\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-sm font-medium\" aria-live=\"polite\">\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst classForNavigationList = cva(\"flex gap-2\", {\n  variants: {\n    variant: {\n      horizontal: \"flex-row items-center justify-between\",\n      vertical: \"flex-col\",\n      circle: \"flex-row items-center justify-between\",\n    },\n  },\n});\n\nconst classForSeparator = cva(\n  [\n    \"bg-muted\",\n    \"data-[state=completed]:bg-primary data-[disabled]:opacity-50\",\n    \"transition-all duration-300 ease-in-out\",\n  ],\n  {\n    variants: {\n      orientation: {\n        horizontal: \"h-0.5 flex-1\",\n        vertical: \"h-full w-0.5\",\n      },\n      labelOrientation: {\n        vertical:\n          \"absolute left-[calc(50%+30px)] right-[calc(-50%+20px)] top-5 block shrink-0\",\n      },\n    },\n  }\n);\n\nfunction scrollIntoStepperPanel(\n  node: HTMLDivElement | null,\n  tracking?: boolean\n) {\n  if (tracking) {\n    node?.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n  }\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children]);\n};\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children);\n  const map = new Map<string, React.ReactNode>();\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === Title) {\n        map.set(\"title\", child);\n      } else if (child.type === Description) {\n        map.set(\"description\", child);\n      } else {\n        map.set(\"panel\", child);\n      }\n    }\n  }\n\n  return map;\n};\n\nconst onStepKeyDown = (\n  e: React.KeyboardEvent<HTMLButtonElement>,\n  nextStep: Stepperize.Step,\n  prevStep: Stepperize.Step\n) => {\n  const { key } = e;\n  const directions = {\n    next: [\"ArrowRight\", \"ArrowDown\"],\n    prev: [\"ArrowLeft\", \"ArrowUp\"],\n  };\n\n  if (directions.next.includes(key) || directions.prev.includes(key)) {\n    const direction = directions.next.includes(key) ? \"next\" : \"prev\";\n    const step = direction === \"next\" ? nextStep : prevStep;\n\n    if (!step) {\n      return;\n    }\n\n    const stepElement = document.getElementById(`step-${step.id}`);\n    if (!stepElement) {\n      return;\n    }\n\n    const isActive =\n      stepElement.parentElement?.getAttribute(\"data-state\") !== \"inactive\";\n    if (isActive || direction === \"prev\") {\n      stepElement.focus();\n    }\n  }\n};\n\nconst getStepState = (currentIndex: number, stepIndex: number) => {\n  if (currentIndex === stepIndex) {\n    return \"active\";\n  }\n  if (currentIndex > stepIndex) {\n    return \"completed\";\n  }\n  return \"inactive\";\n};\n\nnamespace Stepper {\n  export type StepperVariant = \"horizontal\" | \"vertical\" | \"circle\";\n  export type StepperLabelOrientation = \"horizontal\" | \"vertical\";\n\n  export type ConfigProps = {\n    variant?: StepperVariant;\n    labelOrientation?: StepperLabelOrientation;\n    tracking?: boolean;\n  };\n\n  export type DefineProps<Steps extends Stepperize.Step[]> = Omit<\n    Stepperize.StepperReturn<Steps>,\n    \"Scoped\"\n  > & {\n    Stepper: {\n      Provider: (\n        props: Omit<Stepperize.ScopedProps<Steps>, \"children\"> &\n          Omit<React.ComponentProps<\"div\">, \"children\"> &\n          Stepper.ConfigProps & {\n            children:\n              | React.ReactNode\n              | ((props: {\n                  methods: Stepperize.Stepper<Steps>;\n                }) => React.ReactNode);\n          }\n      ) => React.ReactElement;\n      Navigation: (props: React.ComponentProps<\"nav\">) => React.ReactElement;\n      Step: (\n        props: React.ComponentProps<\"button\"> & {\n          of: Stepperize.Get.Id<Steps>;\n          icon?: React.ReactNode;\n        }\n      ) => React.ReactElement;\n      Title: (props: AsChildProps<\"h4\">) => React.ReactElement;\n      Description: (props: AsChildProps<\"p\">) => React.ReactElement;\n      Panel: (props: AsChildProps<\"div\">) => React.ReactElement;\n      Controls: (props: AsChildProps<\"div\">) => React.ReactElement;\n    };\n  };\n\n  export type CircleStepIndicatorProps = {\n    currentStep: number;\n    totalSteps: number;\n    size?: number;\n    strokeWidth?: number;\n  };\n}\n\ntype AsChildProps<T extends React.ElementType> = React.ComponentProps<T> & {\n  asChild?: boolean;\n};\n\nexport { defineStepper };\n",
      "type": "registry:component"
    }
  ]
}